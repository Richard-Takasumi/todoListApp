{"ast":null,"code":"var _jsxFileName = \"C:\\\\Computer Science\\\\TEMG4940\\\\to-do-list-app\\\\src\\\\pages\\\\todo-list\\\\TodoListPage.js\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useState } from 'react';\nimport { TodoInputBar } from '../../components/TodoInputBar/TodoInputBar';\nimport { TodoCategory } from '../../components/TodoCategory/TodoCategory';\nimport \"./todoListPage.scss\";\nimport { DndContext, DragOverlay, KeyboardSensor, PointerSensor, useSensor, useSensors, closestCorners } from '@dnd-kit/core';\nimport { arrayMove, sortableKeyboardCoordinates } from \"@dnd-kit/sortable\";\nimport { TodoItem } from '../../components/TodoItem/TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoListPage = () => {\n  _s();\n  //------------ Todo List ------------\n  const [todos, setTodos] = useState({\n    \"todo\": [{\n      title: \"Todo 1\",\n      description: \"Description 1\",\n      key: \"1\",\n      id: \"1\"\n    }, {\n      title: \"Todo 2\",\n      description: \"Description 2\",\n      key: \"2\",\n      id: \"2\"\n    }],\n    \"inProgress\": [{\n      title: \"Todo 3\",\n      description: \"Description 3\",\n      key: \"3\",\n      id: \"3\"\n    }, {\n      title: \"Todo 4\",\n      description: \"Description 4\",\n      key: \"4\",\n      id: \"4\"\n    }],\n    \"archived\": [{\n      title: \"Todo 5\",\n      description: \"Description 5\",\n      key: \"5\",\n      id: \"5\"\n    }, {\n      title: \"Todo 6\",\n      description: \"Description 6\",\n      key: \"6\",\n      id: \"6\"\n    }]\n  });\n\n  // For detecting native device input\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const [activeTodo, setActiveTodo] = useState(null); // the object of the draggable item that is currently being dragged\n\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    collisionDetection: closestCorners // how to detect collisions between draggable and droppable elements\n    ,\n    sensors: sensors // what sensors to use to detect native device input\n    ,\n    onDragStart: handleDragStart // what to do when a draggable item is picked up\n    ,\n    onDragOver: handleDragOver // what to do when a draggable item is moved over a droppable area\n    ,\n    onDragEnd: handleDragEnd // what to do when a draggable item is dropped\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-todo-bar\",\n        children: /*#__PURE__*/_jsxDEV(TodoInputBar, {\n          setTodos: setTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-categories\",\n        children: [/*#__PURE__*/_jsxDEV(TodoCategory, {\n          id: \"todo\",\n          todos: todos[\"todo\"],\n          setTodos: setTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TodoCategory, {\n          id: \"inProgress\",\n          todos: todos[\"inProgress\"],\n          setTodos: setTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TodoCategory, {\n          id: \"archived\",\n          todos: todos[\"archived\"],\n          setTodos: setTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n          children: activeTodo ? /*#__PURE__*/_jsxDEV(TodoItem, {\n            todo: activeTodo,\n            setTodos: setTodos\n          }, activeTodo.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 44\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n  // ---------------- Start of Drag and Drop Functions ----------------\n  // ------------------------ REPURPOSED CODE FROM --------------------------- \n  // https://codesandbox.io/s/dnd-kit-multi-containers-forked-wxmnx9?file=/src/container.js:0-724\n  function findContainer(id) {\n    // if dragging in the same category, return the same category\n    if (id in todos) {\n      return id;\n    }\n    // otherwise, if moving to a different category, return that category\n    return Object.keys(todos).find(key => todos[key].find(todo => todo.id === id));\n  }\n  function handleDragStart(event) {\n    const {\n      active\n    } = event; // grab the active draggable item\n    const {\n      id\n    } = active; // grab the id of the active draggable item\n    const category = findContainer(id); // find the category of the draggable item\n    const activeTodo = todos[category].find(todo => todo.id === id); // find the draggable item in the category\n    setActiveTodo(activeTodo);\n  }\n\n  // this function handles the case where the user drags a todo to another category e.g from todo to inProgress\n  function handleDragOver(event) {\n    const {\n      active,\n      over\n    } = event;\n    const {\n      rect\n    } = over; // rect is the bounding box of the droppable area\n    const {\n      id\n    } = active;\n    const {\n      id: overId\n    } = over;\n\n    // Find the containers\n    const activeContainer = findContainer(id); // the container of the original todo\n    const overContainer = findContainer(overId); // the container of the todo that is being dragged over\n\n    if (!activeContainer || !overContainer || activeContainer === overContainer) {\n      return;\n    }\n\n    // This is called when the draggable item is moved over a droppable area\n    setTodos(prev => {\n      const overItems = prev[overContainer];\n\n      // Find the indexes for the items\n      const activeTodo = todos[activeContainer].find(todo => todo.id === id);\n      const overTodo = todos[overContainer].find(todo => todo.id === overId);\n      const activeIndex = todos[activeContainer].indexOf(activeTodo);\n      const overIndex = todos[overContainer].indexOf(overTodo);\n      let newIndex;\n      if (overId in prev) {\n        // We're at the root droppable of a container\n        newIndex = overItems.length + 1;\n      } else {\n        // Math to determine the new index of the item after dropping\n        const isBelowLastItem = over && overIndex === overItems.length - 1 && rect.offsetTop > over.rect.offsetTop + over.rect.height;\n        const modifier = isBelowLastItem ? 1 : 0;\n        newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1;\n      }\n      return {\n        // keep the other containers the same\n        ...prev,\n        // remove the item from the original container\n        [activeContainer]: [...prev[activeContainer].filter(todo => todo.id !== active.id)],\n        // add the item to the new container\n        [overContainer]: [...prev[overContainer].slice(0, newIndex), todos[activeContainer][activeIndex], ...prev[overContainer].slice(newIndex, prev[overContainer].length)]\n      };\n    });\n  }\n\n  // this function handles the case where the user re-orders todos in the same category/container\n  function handleDragEnd(event) {\n    const {\n      active,\n      over\n    } = event;\n    console.log(\"active\", active, \"over\", over);\n    if (!over) {\n      return;\n    }\n    const {\n      id\n    } = active;\n    const {\n      id: overId\n    } = over;\n    const activeContainer = findContainer(id);\n    const overContainer = findContainer(overId);\n\n    // if not the same category, return.\n    if (!activeContainer || !overContainer || activeContainer !== overContainer) {\n      return;\n    }\n    const activeTodo = todos[activeContainer].find(todo => todo.id === id);\n    const overTodo = todos[overContainer].find(todo => todo.id === overId);\n    const activeIndex = todos[activeContainer].indexOf(activeTodo);\n    const overIndex = todos[overContainer].indexOf(overTodo);\n    if (activeIndex !== overIndex) {\n      setTodos(todos => ({\n        ...todos,\n        [overContainer]: arrayMove(todos[overContainer], activeIndex, overIndex)\n      }));\n    }\n    setActiveTodo(null);\n  }\n  // ---------------- End of Drag and Drop Functions ----------------\n};\n_s(TodoListPage, \"VtM45otn9F+4yjrQs3qh+Puz5L4=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = TodoListPage;\nvar _c;\n$RefreshReg$(_c, \"TodoListPage\");","map":{"version":3,"names":["React","useEffect","useState","TodoInputBar","TodoCategory","DndContext","DragOverlay","KeyboardSensor","PointerSensor","useSensor","useSensors","closestCorners","arrayMove","sortableKeyboardCoordinates","TodoItem","jsxDEV","_jsxDEV","TodoListPage","_s","todos","setTodos","title","description","key","id","sensors","coordinateGetter","activeTodo","setActiveTodo","collisionDetection","onDragStart","handleDragStart","onDragOver","handleDragOver","onDragEnd","handleDragEnd","children","fileName","_jsxFileName","lineNumber","columnNumber","className","todo","findContainer","Object","keys","find","event","active","category","over","rect","overId","activeContainer","overContainer","prev","overItems","overTodo","activeIndex","indexOf","overIndex","newIndex","length","isBelowLastItem","offsetTop","height","modifier","filter","slice","console","log","_c","$RefreshReg$"],"sources":["C:/Computer Science/TEMG4940/to-do-list-app/src/pages/todo-list/TodoListPage.js"],"sourcesContent":["import {React, useEffect, useState} from 'react'\r\nimport { TodoInputBar } from '../../components/TodoInputBar/TodoInputBar'\r\nimport { TodoCategory } from '../../components/TodoCategory/TodoCategory'\r\nimport \"./todoListPage.scss\"\r\n\r\nimport {\r\n  DndContext,\r\n  DragOverlay,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  closestCorners\r\n} from '@dnd-kit/core';\r\nimport { arrayMove, sortableKeyboardCoordinates } from \"@dnd-kit/sortable\";\r\nimport { TodoItem } from '../../components/TodoItem/TodoItem';\r\n\r\nexport const TodoListPage = () => {\r\n\r\n    //------------ Todo List ------------\r\n    const [todos, setTodos] = useState({\r\n      \"todo\": [{title: \"Todo 1\", description: \"Description 1\", key: \"1\" ,id: \"1\"}, {title: \"Todo 2\", description: \"Description 2\", key: \"2\" ,id: \"2\"}],\r\n      \"inProgress\": [{title: \"Todo 3\", description: \"Description 3\", key: \"3\" ,id: \"3\"}, {title: \"Todo 4\", description: \"Description 4\", key: \"4\" ,id: \"4\"}],\r\n      \"archived\": [{title: \"Todo 5\", description: \"Description 5\", key: \"5\" ,id: \"5\"}, {title: \"Todo 6\", description: \"Description 6\", key: \"6\" ,id: \"6\"}]\r\n    })\r\n\r\n\r\n    // For detecting native device input\r\n    const sensors = useSensors( \r\n      useSensor(PointerSensor),\r\n      useSensor(KeyboardSensor, {\r\n        coordinateGetter: sortableKeyboardCoordinates\r\n      })\r\n    );\r\n\r\n    const [activeTodo, setActiveTodo] = useState(null); // the object of the draggable item that is currently being dragged\r\n    \r\n\r\n    return (\r\n        <DndContext \r\n          collisionDetection={closestCorners}  // how to detect collisions between draggable and droppable elements\r\n          sensors={sensors}                   // what sensors to use to detect native device input\r\n          onDragStart={handleDragStart}       // what to do when a draggable item is picked up\r\n          onDragOver={handleDragOver}         // what to do when a draggable item is moved over a droppable area\r\n          onDragEnd={handleDragEnd}           // what to do when a draggable item is dropped\r\n        >\r\n          <div >\r\n            <h1 > Todo List</h1> \r\n              <div className=\"add-todo-bar\">\r\n                <TodoInputBar setTodos={setTodos}/> \r\n              </div>\r\n              <div className='todo-categories'>\r\n                <TodoCategory id={\"todo\"} todos={todos[\"todo\"]} setTodos={setTodos}/>\r\n                <TodoCategory id={\"inProgress\"} todos={todos[\"inProgress\"]} setTodos={setTodos}/>\r\n                <TodoCategory id={\"archived\"} todos={todos[\"archived\"]} setTodos={setTodos}/>\r\n                <DragOverlay>{activeTodo ? <TodoItem todo={activeTodo} key={activeTodo.key} setTodos={setTodos} /> : null}</DragOverlay>\r\n              </div>\r\n          </div>\r\n        </DndContext>\r\n    )\r\n    // ---------------- Start of Drag and Drop Functions ----------------\r\n    // ------------------------ REPURPOSED CODE FROM --------------------------- \r\n    // https://codesandbox.io/s/dnd-kit-multi-containers-forked-wxmnx9?file=/src/container.js:0-724\r\n    function findContainer(id) {\r\n      // if dragging in the same category, return the same category\r\n      if (id in todos) {\r\n        return id;\r\n      }\r\n      // otherwise, if moving to a different category, return that category\r\n      return Object.keys(todos).find((key) => todos[key].find((todo) => todo.id === id));\r\n    }\r\n\r\n    function handleDragStart(event) {\r\n      const { active } = event; // grab the active draggable item\r\n      const { id } = active;    // grab the id of the active draggable item\r\n      const category = findContainer(id); // find the category of the draggable item\r\n      const activeTodo = todos[category].find((todo) => todo.id === id); // find the draggable item in the category\r\n      setActiveTodo(activeTodo);\r\n    }\r\n\r\n    // this function handles the case where the user drags a todo to another category e.g from todo to inProgress\r\n    function handleDragOver(event) {\r\n      const { active, over } = event;\r\n      const { rect } = over; // rect is the bounding box of the droppable area\r\n      const { id } = active;\r\n      const { id: overId } = over;\r\n  \r\n      // Find the containers\r\n      const activeContainer = findContainer(id);    // the container of the original todo\r\n      const overContainer = findContainer(overId);  // the container of the todo that is being dragged over\r\n\r\n      if (\r\n        !activeContainer ||\r\n        !overContainer ||\r\n        activeContainer === overContainer\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // This is called when the draggable item is moved over a droppable area\r\n      setTodos((prev) => {\r\n        const overItems = prev[overContainer];\r\n        \r\n        // Find the indexes for the items\r\n        const activeTodo = todos[activeContainer].find((todo) => todo.id === id);\r\n        const overTodo = todos[overContainer].find((todo) => todo.id === overId);\r\n    \r\n        const activeIndex = todos[activeContainer].indexOf(activeTodo)\r\n        const overIndex = todos[overContainer].indexOf(overTodo)\r\n        let newIndex;\r\n        if (overId in prev) {\r\n          // We're at the root droppable of a container\r\n          newIndex = overItems.length + 1;\r\n        } else {\r\n          // Math to determine the new index of the item after dropping\r\n          const isBelowLastItem =\r\n            over &&\r\n            overIndex === overItems.length - 1 &&\r\n            rect.offsetTop > over.rect.offsetTop + over.rect.height; \r\n          const modifier = isBelowLastItem ? 1 : 0;\r\n          newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1;\r\n        }\r\n\r\n        return {\r\n          // keep the other containers the same\r\n          ...prev,\r\n          // remove the item from the original container\r\n          [activeContainer]: [\r\n            ...prev[activeContainer].filter((todo) => todo.id !== active.id)\r\n          ],\r\n          // add the item to the new container\r\n          [overContainer]: [ \r\n            ...prev[overContainer].slice(0, newIndex),  \r\n            todos[activeContainer][activeIndex],\r\n            ...prev[overContainer].slice(newIndex, prev[overContainer].length)\r\n          ]\r\n        };\r\n      });\r\n    }\r\n\r\n\r\n    // this function handles the case where the user re-orders todos in the same category/container\r\n    function handleDragEnd(event) {\r\n      const { active, over } = event;\r\n      console.log(\"active\", active, \"over\", over)\r\n      if(!over) {\r\n        return\r\n      }\r\n       \r\n      const { id } = active;\r\n      const { id: overId } = over;\r\n  \r\n      const activeContainer = findContainer(id);\r\n      const overContainer = findContainer(overId);\r\n  \r\n      // if not the same category, return.\r\n      if (\r\n        !activeContainer ||\r\n        !overContainer ||\r\n        activeContainer !== overContainer\r\n      ) {\r\n        return;\r\n      }\r\n      const activeTodo = todos[activeContainer].find((todo) => todo.id === id);\r\n      const overTodo = todos[overContainer].find((todo) => todo.id === overId);\r\n\r\n      const activeIndex = todos[activeContainer].indexOf(activeTodo)\r\n      const overIndex = todos[overContainer].indexOf(overTodo)\r\n\r\n      if (activeIndex !== overIndex) {\r\n        setTodos((todos) => ({\r\n          ...todos,\r\n          [overContainer]: arrayMove(todos[overContainer], activeIndex, overIndex)\r\n        }));\r\n      }\r\n  \r\n      setActiveTodo(null);\r\n    }\r\n    // ---------------- End of Drag and Drop Functions ----------------\r\n  \r\n}"],"mappings":";;AAAA,SAAQA,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,YAAY,QAAQ,4CAA4C;AACzE,SAASC,YAAY,QAAQ,4CAA4C;AACzE,OAAO,qBAAqB;AAE5B,SACEC,UAAU,EACVC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,UAAU,EACVC,cAAc,QACT,eAAe;AACtB,SAASC,SAAS,EAAEC,2BAA2B,QAAQ,mBAAmB;AAC1E,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE9B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC;IACjC,MAAM,EAAE,CAAC;MAACmB,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC,EAAE;MAACH,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC,CAAC;IAChJ,YAAY,EAAE,CAAC;MAACH,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC,EAAE;MAACH,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC,CAAC;IACtJ,UAAU,EAAE,CAAC;MAACH,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC,EAAE;MAACH,KAAK,EAAE,QAAQ;MAAEC,WAAW,EAAE,eAAe;MAAEC,GAAG,EAAE,GAAG;MAAEC,EAAE,EAAE;IAAG,CAAC;EACrJ,CAAC,CAAC;;EAGF;EACA,MAAMC,OAAO,GAAGf,UAAU,CACxBD,SAAS,CAACD,aAAa,CAAC,EACxBC,SAAS,CAACF,cAAc,EAAE;IACxBmB,gBAAgB,EAAEb;EACpB,CAAC,CACH,CAAC;EAED,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAGpD,oBACIc,OAAA,CAACX,UAAU;IACTwB,kBAAkB,EAAElB,cAAe,CAAE;IAAA;IACrCc,OAAO,EAAEA,OAAQ,CAAmB;IAAA;IACpCK,WAAW,EAAEC,eAAgB,CAAO;IAAA;IACpCC,UAAU,EAAEC,cAAe,CAAS;IAAA;IACpCC,SAAS,EAAEC,aAAc,CAAW;IAAA;IAAAC,QAAA,eAEpCpB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAK;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBxB,OAAA;QAAKyB,SAAS,EAAC,cAAc;QAAAL,QAAA,eAC3BpB,OAAA,CAACb,YAAY;UAACiB,QAAQ,EAAEA;QAAS;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACNxB,OAAA;QAAKyB,SAAS,EAAC,iBAAiB;QAAAL,QAAA,gBAC9BpB,OAAA,CAACZ,YAAY;UAACoB,EAAE,EAAE,MAAO;UAACL,KAAK,EAAEA,KAAK,CAAC,MAAM,CAAE;UAACC,QAAQ,EAAEA;QAAS;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACrExB,OAAA,CAACZ,YAAY;UAACoB,EAAE,EAAE,YAAa;UAACL,KAAK,EAAEA,KAAK,CAAC,YAAY,CAAE;UAACC,QAAQ,EAAEA;QAAS;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACjFxB,OAAA,CAACZ,YAAY;UAACoB,EAAE,EAAE,UAAW;UAACL,KAAK,EAAEA,KAAK,CAAC,UAAU,CAAE;UAACC,QAAQ,EAAEA;QAAS;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC7ExB,OAAA,CAACV,WAAW;UAAA8B,QAAA,EAAET,UAAU,gBAAGX,OAAA,CAACF,QAAQ;YAAC4B,IAAI,EAAEf,UAAW;YAAsBP,QAAQ,EAAEA;UAAS,GAAnCO,UAAU,CAACJ,GAAG;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAuB,CAAC,GAAG;QAAI;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;EAEjB;EACA;EACA;EACA,SAASG,aAAaA,CAACnB,EAAE,EAAE;IACzB;IACA,IAAIA,EAAE,IAAIL,KAAK,EAAE;MACf,OAAOK,EAAE;IACX;IACA;IACA,OAAOoB,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC,CAAC2B,IAAI,CAAEvB,GAAG,IAAKJ,KAAK,CAACI,GAAG,CAAC,CAACuB,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKA,EAAE,CAAC,CAAC;EACpF;EAEA,SAASO,eAAeA,CAACgB,KAAK,EAAE;IAC9B,MAAM;MAAEC;IAAO,CAAC,GAAGD,KAAK,CAAC,CAAC;IAC1B,MAAM;MAAEvB;IAAG,CAAC,GAAGwB,MAAM,CAAC,CAAI;IAC1B,MAAMC,QAAQ,GAAGN,aAAa,CAACnB,EAAE,CAAC,CAAC,CAAC;IACpC,MAAMG,UAAU,GAAGR,KAAK,CAAC8B,QAAQ,CAAC,CAACH,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;IACnEI,aAAa,CAACD,UAAU,CAAC;EAC3B;;EAEA;EACA,SAASM,cAAcA,CAACc,KAAK,EAAE;IAC7B,MAAM;MAAEC,MAAM;MAAEE;IAAK,CAAC,GAAGH,KAAK;IAC9B,MAAM;MAAEI;IAAK,CAAC,GAAGD,IAAI,CAAC,CAAC;IACvB,MAAM;MAAE1B;IAAG,CAAC,GAAGwB,MAAM;IACrB,MAAM;MAAExB,EAAE,EAAE4B;IAAO,CAAC,GAAGF,IAAI;;IAE3B;IACA,MAAMG,eAAe,GAAGV,aAAa,CAACnB,EAAE,CAAC,CAAC,CAAI;IAC9C,MAAM8B,aAAa,GAAGX,aAAa,CAACS,MAAM,CAAC,CAAC,CAAE;;IAE9C,IACE,CAACC,eAAe,IAChB,CAACC,aAAa,IACdD,eAAe,KAAKC,aAAa,EACjC;MACA;IACF;;IAEA;IACAlC,QAAQ,CAAEmC,IAAI,IAAK;MACjB,MAAMC,SAAS,GAAGD,IAAI,CAACD,aAAa,CAAC;;MAErC;MACA,MAAM3B,UAAU,GAAGR,KAAK,CAACkC,eAAe,CAAC,CAACP,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKA,EAAE,CAAC;MACxE,MAAMiC,QAAQ,GAAGtC,KAAK,CAACmC,aAAa,CAAC,CAACR,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAK4B,MAAM,CAAC;MAExE,MAAMM,WAAW,GAAGvC,KAAK,CAACkC,eAAe,CAAC,CAACM,OAAO,CAAChC,UAAU,CAAC;MAC9D,MAAMiC,SAAS,GAAGzC,KAAK,CAACmC,aAAa,CAAC,CAACK,OAAO,CAACF,QAAQ,CAAC;MACxD,IAAII,QAAQ;MACZ,IAAIT,MAAM,IAAIG,IAAI,EAAE;QAClB;QACAM,QAAQ,GAAGL,SAAS,CAACM,MAAM,GAAG,CAAC;MACjC,CAAC,MAAM;QACL;QACA,MAAMC,eAAe,GACnBb,IAAI,IACJU,SAAS,KAAKJ,SAAS,CAACM,MAAM,GAAG,CAAC,IAClCX,IAAI,CAACa,SAAS,GAAGd,IAAI,CAACC,IAAI,CAACa,SAAS,GAAGd,IAAI,CAACC,IAAI,CAACc,MAAM;QACzD,MAAMC,QAAQ,GAAGH,eAAe,GAAG,CAAC,GAAG,CAAC;QACxCF,QAAQ,GAAGD,SAAS,IAAI,CAAC,GAAGA,SAAS,GAAGM,QAAQ,GAAGV,SAAS,CAACM,MAAM,GAAG,CAAC;MACzE;MAEA,OAAO;QACL;QACA,GAAGP,IAAI;QACP;QACA,CAACF,eAAe,GAAG,CACjB,GAAGE,IAAI,CAACF,eAAe,CAAC,CAACc,MAAM,CAAEzB,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKwB,MAAM,CAACxB,EAAE,CAAC,CACjE;QACD;QACA,CAAC8B,aAAa,GAAG,CACf,GAAGC,IAAI,CAACD,aAAa,CAAC,CAACc,KAAK,CAAC,CAAC,EAAEP,QAAQ,CAAC,EACzC1C,KAAK,CAACkC,eAAe,CAAC,CAACK,WAAW,CAAC,EACnC,GAAGH,IAAI,CAACD,aAAa,CAAC,CAACc,KAAK,CAACP,QAAQ,EAAEN,IAAI,CAACD,aAAa,CAAC,CAACQ,MAAM,CAAC;MAEtE,CAAC;IACH,CAAC,CAAC;EACJ;;EAGA;EACA,SAAS3B,aAAaA,CAACY,KAAK,EAAE;IAC5B,MAAM;MAAEC,MAAM;MAAEE;IAAK,CAAC,GAAGH,KAAK;IAC9BsB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEtB,MAAM,EAAE,MAAM,EAAEE,IAAI,CAAC;IAC3C,IAAG,CAACA,IAAI,EAAE;MACR;IACF;IAEA,MAAM;MAAE1B;IAAG,CAAC,GAAGwB,MAAM;IACrB,MAAM;MAAExB,EAAE,EAAE4B;IAAO,CAAC,GAAGF,IAAI;IAE3B,MAAMG,eAAe,GAAGV,aAAa,CAACnB,EAAE,CAAC;IACzC,MAAM8B,aAAa,GAAGX,aAAa,CAACS,MAAM,CAAC;;IAE3C;IACA,IACE,CAACC,eAAe,IAChB,CAACC,aAAa,IACdD,eAAe,KAAKC,aAAa,EACjC;MACA;IACF;IACA,MAAM3B,UAAU,GAAGR,KAAK,CAACkC,eAAe,CAAC,CAACP,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKA,EAAE,CAAC;IACxE,MAAMiC,QAAQ,GAAGtC,KAAK,CAACmC,aAAa,CAAC,CAACR,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAK4B,MAAM,CAAC;IAExE,MAAMM,WAAW,GAAGvC,KAAK,CAACkC,eAAe,CAAC,CAACM,OAAO,CAAChC,UAAU,CAAC;IAC9D,MAAMiC,SAAS,GAAGzC,KAAK,CAACmC,aAAa,CAAC,CAACK,OAAO,CAACF,QAAQ,CAAC;IAExD,IAAIC,WAAW,KAAKE,SAAS,EAAE;MAC7BxC,QAAQ,CAAED,KAAK,KAAM;QACnB,GAAGA,KAAK;QACR,CAACmC,aAAa,GAAG1C,SAAS,CAACO,KAAK,CAACmC,aAAa,CAAC,EAAEI,WAAW,EAAEE,SAAS;MACzE,CAAC,CAAC,CAAC;IACL;IAEAhC,aAAa,CAAC,IAAI,CAAC;EACrB;EACA;AAEJ,CAAC;AAAAV,EAAA,CAnKYD,YAAY;EAAA,QAWLP,UAAU,EACxBD,SAAS,EACTA,SAAS;AAAA;AAAA8D,EAAA,GAbFtD,YAAY;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}